#include <iostream>
#include <string>
#include <limits>
using namespace std;

// Contact class
class Contact {

public:
    string name, email, phoneNum, newname;

    // Constructor
    Contact(string n, string p, string e) {
        name = n;
        phoneNum = p;
        email = e;
    }

    // Accessor methods
    string getName() { return name; }
    string getPhoneNum() { return phoneNum; }
    string getEmail() { return email; }
};

// Node class for linked list
class Node {
public:
    Contact* data;
    Node* next;

    // Constructor
    Node(Contact* c) {
        data = c;
        next = NULL;
    }

    // Destructor
    ~Node() {
        delete data;
        next = NULL;
    }
};

// PhoneBook class
class PhoneBook {
private:
    Node* head;
    int size;


    // Helper function to find node given contact name
    Node* findNode(string name) {
        Node* curr = head;
        while (curr != NULL) {
            if (curr->data->getName() == name)
                return curr;
            curr = curr->next; // next node
        }
        return NULL;
    }

public:
    // Constructor
    PhoneBook() {
        head = NULL;
        size = 0;
    }

    // Destructor
    ~PhoneBook() {
        Node* curr = head;
        while (curr != NULL) {
            Node* temp = curr;
            curr = curr->next;
            delete temp;
        }
    }

    // Check the List is Empty or not
    bool isempty() {
        if (head == NULL)
            return true;
        else
            return false;
    }
    // Check How Many Contacts                              
    int iscount() {
        int counter = 0;
        Node* temp = head;
        while (temp != NULL)
        {
            counter++;
            temp = temp->next;
        }
        return counter;
    }

    // Add contact
    void addContact(string name, string phoneNum, string email) {
        Contact* c = new Contact(name, phoneNum, email); // new contact 
        Node* n = new Node(c); // new node and pass (c = name, phone, emaill) 

        if (head == NULL)
            head = n;
        else {
            Node* curr = head;
            while (curr->next != NULL)
                curr = curr->next;
            curr->next = n;
        }
        size++;
        cout << " \n Contact added. \n" << endl;
    }

    // Search for contact and display information
    void searchContact(string name) {
        Node* n = findNode(name);
        if (n == NULL)
            cout << "Contact not found!. \n" << endl;
        else {
            cout << "Name: " << n->data->getName() << endl;
            cout << "Phone Number: " << n->data->getPhoneNum() << endl;
            cout << "Email: " << n->data->getEmail() << endl;
        }
    }

    // Edit contact information
    void editContact(string name, string newname, string phoneNum, string email) { // phonenum and email not important 
        Node* n = findNode(name);
        if (isempty())
            cout << "Contact not found. \n" << endl;
        else {

            n->data->name = name;
            n->data->newname = newname;
            n->data->phoneNum = phoneNum;
            n->data->email = email;
            cout << "Contact updated. \n" << endl;
        }
    }

    // Remove contact from phone book
    void removeContact(string name) {
        Node* prev = NULL;
        Node* curr = head;
        while (curr != NULL && curr->data->getName() != name) {
            prev = curr;
            curr = curr->next;
        }

        if (curr == NULL)
            cout << "Contact not found." << endl;
        else {
            if (prev == NULL)
                head = curr->next;
            else
                prev->next = curr->next;
            delete curr;
            size--;
            cout << "Contact removed." << endl;
        }
    }

    // Display all contacts in phone book
    void displayContacts() {
        if (isempty())
            cout << "No contacts in phone book." << endl;
        else {
            Node* temp = head;
            while (temp != NULL) {
                cout << "Name: " << temp->data->getName() << endl;
                cout << "Phone Number: " << temp->data->getPhoneNum() << endl;
                cout << "Email: " << temp->data->getEmail() << endl;
                temp = temp->next; // Next Node 
            }
        }
    }
};

// Main function
int main() {
    PhoneBook pb;
    int choice;
    cout << "################################################## \n";
    cout << "############ PHONE BOOK APPLICATION ############## \n";
    cout << "################################################## \n \n";
    do {
        // Display menu options
        cout << " ------------------------------------------------- \n" << endl;
        cout << "1. Add contact" << endl;
        cout << "2. Search Contact " << endl;
        cout << "3. Edit Contact " << endl;
        cout << "4. Remove Contact " << endl;
        cout << "5. Display all Contacts " << endl;
        cout << "6. Clear Screen " << endl;
        cout << "7. check List Empty Or Not " << endl;
        cout << "8. Exit " << endl;

        cout << "Enter Choice : ";
        // Get user input for menu choice
        cin >> choice;

        //can you write enterid chice
        cout << "You Enterd : " << choice << endl;

        string name, email, phoneNum;
        string newName, newEmail, newPhoneNum;

        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ;
        ;
        // Perform action based on user's choice
        switch (choice)
        {

        case 1:

            cout << "Enter name: ";
            cin.ignore(numeric_limits<int>::max(), '\n');
            getline(cin, name);
            cout << "Enter phone number: ";
            cin >> phoneNum;
            cout << "Enter email: ";
            cin >> email;
            pb.addContact(name, phoneNum, email);
            //system("cls");
            break;
        case 2:
            system("cls");
            cout << "Enter name to search: " << endl;
            cin >> name;
            pb.searchContact(name);
            break;
        case 3:
            cout << "Enter name to edit: " << endl;
            cin >> name;
            if (pb.isempty())
                cout << "The Contact not Found..!" << endl;
            else
            {
                system("cls");
                cout << "Enter a New Name \n";
                cin >> newName;
                cout << "Enter new phone number: " << endl;
                cin >> newPhoneNum;
                cout << "Enter new email: " << endl;
                cin >> newEmail;
                pb.editContact(name, newName, newPhoneNum, newEmail);
            }

            break;
        case 4:
            system("cls");
            cout << "Enter name to remove: " << endl;
            cin >> name;
            pb.removeContact(name);
            break;
        case 5:
            system("cls");
            if (pb.isempty())
                cout << "The List is Empty..!" << endl;
            else
            {
                cout << "The List Contains: " << pb.iscount() << endl << endl;
                pb.displayContacts();
            }

            break;
        case 6:
            system("cls");
            break;
        case 7:
            system("cls");
            if (pb.isempty())
                cout << "The List is empty..! " << endl;
            else
                cout << "The List Not Empty "
                << "The List Contains : " << pb.iscount() << endl;
            
            break;
        case 8:
            cout << "Exiting program..." << endl;
            break;
        default:
            cout << "Invalid choice. Please try again." << endl;
            break;
        }

    } while (choice != 8);
    return 0;
}
