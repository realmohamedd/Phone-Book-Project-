#include <iostream>
#include <string>

using namespace std;

class Contact {
public:
    string name;
    string phone;
    string email;
    Contact* next;
};

class Phonebook : public Contact {
private:
    Contact* front;
    Contact* back;

public:
    Phonebook() {
        front = NULL;
        back = NULL;
    }
    /*
     ~Phonebook() {
        while (!isEmpty()) {
            dequeue();
        }
    }
    */
    

    bool isEmpty() {
        if (front == NULL && back == NULL)
            return true;
        else
            return false;
       
    }
    int countContacts() {
        int count = 0;
        Contact* current = front;
        while (current != nullptr) {
            count++;
            current = current->next;
        }
        return count;
    }

    void enqueue(string name, string phone,  string email) {
        Contact* newContact = new Contact;
        newContact->name = name;
        newContact->phone = phone;
        newContact->email = email;
        newContact->next = nullptr;

        if (isEmpty()) {
            front = newContact;
            back = newContact;
        }
        else {
            back->next = newContact;
            back = newContact;
        }

        cout << "Contact added successfully!" << endl;
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Phonebook is empty." << endl;
            return;
        }
        
        Contact* temp = front;
        front = front->next;

        cout << "Contact deleted: " << endl;
        delete temp;
    }

    void deleteContact(string name) {
        if (isEmpty()) {
            cout << "Phonebook is empty." << endl;
            return;
        }

        Contact* current = front;
        Contact* prev = nullptr;

        while (current != nullptr) 
        {
            if (current->name == name) 
            {
                if (current == front) 
                {
                    front = front->next;
                }
                else if (current == back) 
                {
                    back = prev;
                    back->next = nullptr;
                }
                else 
                {
                    prev->next = current->next;
                }

                cout << "Contact deleted: " << endl;
                delete current;
                return;
            }

            prev = current;
            current = current->next;
        }

        cout << "Contact not found." << endl;
    }

    void editContact(string name) {
        Contact* temp = front;
        while (temp != NULL) {
            if (temp->name == name) {
                string newName, newPhone, newEmail;
                cout << "Enter new name: ";
                cin.ignore();
                getline(cin, newName);
                cout << "Enter new phone number: ";
                cin >> newPhone;
                cout << "Enter new email address: ";
                cin >> newEmail;
                temp->name = newName;
                temp->phone = newPhone;
                temp->email = newEmail;
                cout << "Contact edited successfully!" << endl;
                
            }
            
            temp = temp->next;
        }
        cout << "Contact not found." << endl;
    }
    void searchContact(string name) {
        Contact* temp = front;
        while (temp != NULL) {
            if (temp->name == name) {
                cout << "Contact found:" << endl;
                cout << "Name: " << temp->name << endl;
                cout << "Phone: " << temp->phone << endl;
                cout << "Email: " << temp->email << endl;
                temp = temp->next;
              
            }
            else
                cout << "Contact not found." << endl;
        }
            
    }

    void displayContacts() {
        if (isEmpty()) {
            cout << "Phonebook is empty." << endl;
            return;
        }

        cout << "Phonebook contacts: " << endl;
        Contact* temp = front;
        while (temp != NULL) {
            cout << "Name: " << temp->name << endl;
            cout << "Phone Number: " << temp->phone << endl;
            cout << "Email: " << temp->email << endl;
            temp = temp->next;
            cout << endl;
        }
    }
};

int main() {
    Phonebook phonebook;
    cout << "##################################################" << endl;
    cout << "############# PHONE BOOK APPLICATION #############" << endl;
    cout << "##################################################" << endl;
    while (true) {
        cout << endl;
        cout << "--------------------------------------------------" << endl;
        cout << "1. Add Contact" << endl;
        cout << "2. Delete Contact" << endl;
        cout << "3. Edit Contact" << endl;
        cout << "4. Search Contact" << endl;
        cout << "5. Display Contacts" << endl;
        cout << "6. check List Empty Or Not " << endl;
        cout << "7. Exit" << endl;
        cout << "Enter your choice: ";

        int choice;
        cin >> choice;
        cout << "You Entered : " << choice << endl;
        switch (choice) {
        case 1:
        {
            string name, phone, email;
            cout << "Enter contact name: ";
            cin.ignore();
            getline(cin, name);
            cout << "Enter contact phone: ";
            getline(cin, phone);
            cout << "Enter contact email: ";
            getline(cin, email);
            phonebook.enqueue(name, phone, email);
            break;
        }
        case 2:
        {
            system("cls");
            string name;
            cout << "Enter the name of the contact to delete: ";
            cin.ignore();
            getline(cin, name);
            phonebook.deleteContact(name);
            break;
        }
        case 3:
        {
            system("cls");
            string name;
            cout << "Enter the name of the contact to edit: ";
            cin.ignore();
            getline(cin, name);
            phonebook.editContact(name);
            break;
        }
        case 4:
        {
            system("cls");
            string name;
            cout << "Enter the name of the contact to search: ";
            cin.ignore();
            getline(cin, name);
            phonebook.searchContact(name);
            break;
        }
        case 5:
            system("cls");
            cout << "The List Contains: " << phonebook.countContacts() << endl << endl;
            phonebook.displayContacts();
            break;
        case 6:
            system("cls");
            if (phonebook.isEmpty())
                cout << "The List is empty..! " << endl;
            else
                cout << "The List Not Empty "
                << "List Contains : " << phonebook.countContacts() << endl;
            break;
        case 7:
            exit(0);
        default:
            cout << "Invalid choice. Try again." << endl;
        }
    }

    return 0;
}
